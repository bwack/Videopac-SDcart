;sdcart-rom.a48
; by Bwack 2018
; based on SÃ¶ren Gust's RAM cart design from late 1990s early 2000.

; cart commands from the videpac to the arduino
cmd_inserted	equ	1
cmd_dirlist	equ	2
cmd_loadrom	equ	3

	cpu	8048

	org	400h
	
	include	"g7000.h"

	jmp	selectgame	; RESET
	jmp	irq		; interrupt
	jmp	timer		; timer
	jmp	vsyncirq	; VSYNC-interrupt
	jmp	start		; after selectgame
	jmp	soundirq	; sound-interrupt

timer	retr			; we don't need timer

start
	jmp	start
	; wait for end of keyclick
	mov	r0,#03fh
	mov	a,@r0
	jb6	start
	
	call	gfxoff
	mov	r0,#80h
	mov	r1,#hellostr & 0ffh
	mov	r2,#0bh ;11 long
movetxt
	inc	r0		; next char
	inc	r1		;
	djnz	r2,movetxt	; repeat 11 times
	call	vdcenable
display	
	mov	r3,#10h		; x-position
	mov	r4,#10h		; y-position
	mov	r0,#vdc_char0
	call	drawtext

	mov	r3,#14h		; x-position
	mov	r4,#20h		; y-position
	mov	r0,#vdc_char1
	call	drawtext
repeat_text
	
	mov	r3,#18h		; x-position
	mov	r4,#30h		; y-position
	mov	r0,#vdc_char2
	call	drawtext
	call	gfxon		; lets see what is written
	
	dis	i		; interrupts and time-critical
	dis	tcnti		; code don't work together
	mov	r3,#000h

	;in	a,P1		; [2] get port 1
	;anl	a,#0fch		; [2] mask out bankswitch
	;orl	a,r3		; [1] set bank
	;outl	P1,a		; [2] do it
	call	extramenable
	call	waitvsync
	call	gfxoff

	mov	r3,#000h
	mov	r2,#00fh
	call	waitvsync

; send command and receive testing
; - send "is card inserted" command and change color on the screen
	call	waitvsync
testreceive
	mov	a,#cmd_inserted
	call	serial_send
	orl	P1,#0bch	; [2] switch..
	anl	P1,#0afh	; [2] ..to extram
	mov	r3,#0bh
	call	receive96
	orl	P1,#0bch	; [2] switch..
	anl	P1,#0afh	; [2] ..to extram

	call	drawtext
theend	jmp display
	
	mov	r0,#00h		; ram address 00
	movx	a,@R0
	rl	a
	rl	a
	rl	a
	;mov	a,r4		; [1] get background color
	;add	a,#8		; [2] next color
	;anl	a,#038h		; [2] mask out relevant bits
	mov	r1,#vdc_color	; [2] color register
	orl	P1,#0bch	; [2] switch..
	anl	P1,#0b7h	; [2] ..to vdc
	movx	@r1,a		; [2] set new background color
	orl	P1,#0bch	; [2] switch..
	anl	P1,#0afh	; [2] ..to extram


drawtext
	call	gfxoff
	orl	P1,#0bch	; [2] switch..
	anl	P1,#0b7h	; [2] ..to vdc
	mov	r2,#0bh		; length
	;mov	r1,#hellostr & 0ffh	; the string to print, must be in the same page
	mov	r1,#20h
loop	mov	a,r1		; get pointer
	;movp	a,@a		; get char
	;movx	a,@r1
	mov	a,@r1
	mov	r5,a		; into the right register
	inc	r1		; advance pointer
	mov	r6,#col_chr_white
	call	printchar	; print it
	djnz	r2,loop		; do it again
	call	gfxon

	retr

	
hellostr	db	1dh, 12h, 0eh, 0eh, 17h, 0ch, 11h, 17h, 13h, 0eh, 1ah

; 9600 in PAL: (2.5us per cycle)
; 1 bit = 104.2 usec = 42 clocks
; 1.5 bits = 156.3 usec = 63 clocks

serial_send
	dis	i		; interrupts and time-critical
	dis	tcnti		; code don't work together
	mov	r0,#08h	; eight bits
send_startbit
	anl	P1,#0fdh	; output 0
	mov	r1,#11h		; [2] cycles to wait (x2)
wait_start
	djnz	r1,wait_start	; [2*17] decrement jump not zero
nextbit
	mov	r1,#0fh		; [2] cycles to wait (x2)
	jb0	send_1		; [2] jump carry
send_0
	anl	P1,#0fdh	; [2] output 0
	jmp	wait96		; [2]
send_1
	orl	P1,#002h	; output 1
	nop			; [1]
	nop			; [1]
wait96
	djnz	r1,wait96	; [2*15]
	rr	a		; [1]
	;nop			; [1]
	djnz	r0,nextbit	; [2]
	mov	r1,#14h		; [2]
	orl	P1,#02h		; [2] output 1
send_end
	djnz	r1,send_end	; [2*20]
	ret

; receive 1 byte from T0 (async, 9600 bps)
; 9600 in NTSC: (2.8us per cycle)
; 1 bit = 104.2 usec = 37 clocks
; 1.5 bits = 156.3 usec = 56 clocks
; PARAMS: r3:length
; RETURN: ACC (last byte in stream, for now)

receive96 section receive96pal
	;in	a,P1
	;mov	r4,a
	call	extramenable
	dis	i		; interrupts and time-critical
	dis	tcnti		; code don't work together
	orl	P1,#10h		; cs cartram
	mov	r0,#20h
receive96p
	movx	a,@r0
	jnz	receive96p	; wait for start

	; wait 1.5 cycles
	mov	r1,#1bh
recwait	
	djnz	r1,recwait
	mov	r1,#10h
recloop
	movx	a,@r0		; read
	;anl	P1,#0efh	; cs extram
	;movx	@r0,a		; store
	;orl	P1,#10h		; cs cartram
	mov	@r0,a		; write to internal ram
	inc	r0
	nop
	mov	r1,#10h
recdelay
	djnz	r1,recdelay
	djnz	r3,recloop
	
	;mov	a,r4
	;outl	P1,a
	ret			; [2] byte finished

	endsection receive96pal

	align	256		; start new page


;fiftyherz
;	call	waitvsync
;	in	a,P1		; [2] get port 1
;	xrl	a,#010h
;	outl	P1,a		; [2] do it
;	jmp	fiftyherz	; Thats all

	
